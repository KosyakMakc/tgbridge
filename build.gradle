plugins {
    id "java"
    id "org.jetbrains.kotlin.jvm" version "1.9.21" apply false
    id "org.jetbrains.kotlin.plugin.serialization" version "1.9.21" apply false
    id "com.github.johnrengelman.shadow" version "8.1.1" apply false
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'com.github.johnrengelman.shadow'

    group = rootProject.maven_group
    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version

    base {
        archivesName = rootProject.archives_base_name
    }

    repositories {
        mavenCentral()
        maven {
            url "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            content {
                includeGroup "com.squareup.retrofit2"
            }
        }
    }

    dependencies {
        if (project.name == "paper") {
            implementation "org.jetbrains.kotlinx:kotlinx-datetime:${rootProject.kotlinx_datetime_version}"
        } else if (project.name == "forge") {
            shadow implementation("org.jetbrains.kotlinx:kotlinx-datetime:${rootProject.kotlinx_datetime_version}")
        } else {
            compileOnly "org.jetbrains.kotlinx:kotlinx-datetime:${rootProject.kotlinx_datetime_version}"
        }
        if (project.name == "paper") {
            implementation "org.jetbrains.kotlin:kotlin-stdlib:${rootProject.kotlin_version}"
            implementation "org.jetbrains.kotlin:kotlin-reflect:${rootProject.kotlin_version}"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${rootProject.kotlinx_coroutines_version}"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-core:${rootProject.kotlinx_serialization_version}"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:${rootProject.kotlinx_serialization_version}"
        } else {
            compileOnly "org.jetbrains.kotlin:kotlin-stdlib:${rootProject.kotlin_version}"
            compileOnly "org.jetbrains.kotlin:kotlin-reflect:${rootProject.kotlin_version}"
            compileOnly "org.jetbrains.kotlinx:kotlinx-coroutines-core:${rootProject.kotlinx_coroutines_version}"
            compileOnly "org.jetbrains.kotlinx:kotlinx-serialization-core:${rootProject.kotlinx_serialization_version}"
            compileOnly "org.jetbrains.kotlinx:kotlinx-serialization-json:${rootProject.kotlinx_serialization_version}"
        }
        if (project.name == "paper" || project.name == "common") {
            compileOnly("net.kyori:adventure-api:${rootProject.adventure_version}")
            compileOnly("net.kyori:adventure-text-serializer-gson:${rootProject.adventure_version}") {
                exclude(module: 'gson')
            }
            implementation("io.github.xn32:json5k:0.3.0") {
                exclude(module: 'kotlin-stdlib')
                exclude(module: 'kotlinx-serialization-core')
            }
        } else {
            shadow "net.kyori:adventure-api:${rootProject.adventure_version}"
            shadow("net.kyori:adventure-text-serializer-gson:${rootProject.adventure_version}") {
                exclude(module: 'gson')
            }
            shadow(implementation("io.github.xn32:json5k:0.3.0")) {
                exclude(module: 'kotlin-stdlib')
                exclude(module: 'kotlinx-serialization-core')
            }
        }
        implementation("com.squareup.retrofit2:retrofit:2.10.0-SNAPSHOT") {
            exclude(module: 'kotlin-stdlib')
            exclude(module: 'kotlin-reflect')
            exclude(module: 'kotlinx-coroutines-core')
            exclude(module: 'kotlinx-serialization-core')
            exclude(module: 'kotlinx-serialization-json')
        }
        implementation("com.squareup.retrofit2:converter-gson:2.10.0-SNAPSHOT") {
            exclude(module: 'gson')
        }
        compileOnly "com.google.code.gson:gson:2.10.1"
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        it.options.release = 17
    }

    compileKotlin {
        kotlinOptions.jvmTarget = 17
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
        toolchain.languageVersion = JavaLanguageVersion.of(17)
    }

    shadowJar {
        from("LICENSE") {
            rename { "${it}_${project.base.archivesName.get()}" }
        }
        relocate "io.github.xn32", "tgbridge.shaded.xn32"
    }
}
