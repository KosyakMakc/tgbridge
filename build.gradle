plugins {
    id "java"
    id "org.jetbrains.kotlin.jvm" version "1.9.21" apply false
    id "org.jetbrains.kotlin.plugin.serialization" version "1.9.21" apply false
    id "com.github.johnrengelman.shadow" version "8.1.1" apply false
    id "io.papermc.paperweight.userdev" version "1.5.15" apply false
    id "xyz.jpenilla.run-paper" version "2.2.3" apply false
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'com.github.johnrengelman.shadow'

    group = rootProject.maven_group
    archivesBaseName = rootProject.name + "-" + project.name
    version = rootProject.mod_version

    repositories {
        mavenCentral()
        maven {
            url "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            content {
                includeGroup "com.squareup.retrofit2"
            }
        }
    }

    dependencies {
        if (project.name == "paper") {
            // I didn't find a good kotlin for paper library
            implementation "org.jetbrains.kotlin:kotlin-stdlib:${rootProject.kotlin_version}"
            implementation "org.jetbrains.kotlin:kotlin-reflect:${rootProject.kotlin_version}"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${rootProject.kotlinx_coroutines_version}"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-core:${rootProject.kotlinx_serialization_version}"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:${rootProject.kotlinx_serialization_version}"
        } else {
            compileOnly "org.jetbrains.kotlin:kotlin-stdlib:${rootProject.kotlin_version}"
            compileOnly "org.jetbrains.kotlin:kotlin-reflect:${rootProject.kotlin_version}"
            compileOnly "org.jetbrains.kotlinx:kotlinx-coroutines-core:${rootProject.kotlinx_coroutines_version}"
            compileOnly "org.jetbrains.kotlinx:kotlinx-serialization-core:${rootProject.kotlinx_serialization_version}"
            compileOnly "org.jetbrains.kotlinx:kotlinx-serialization-json:${rootProject.kotlinx_serialization_version}"
        }
        if (project.name == "paper" || project.name == "common") {
            // paper already includes adventure
            compileOnly("net.kyori:adventure-api:${rootProject.adventure_version}")
            compileOnly("net.kyori:adventure-text-serializer-gson:${rootProject.adventure_version}") {
                exclude(module: 'gson')
            }
        } else {
            // shadow for all other loaders
            shadow "net.kyori:adventure-api:${rootProject.adventure_version}"
            shadow("net.kyori:adventure-text-serializer-gson:${rootProject.adventure_version}") {
                exclude(module: 'gson')
            }
        }
        // is available in all loaders at runtime
        compileOnly "com.google.code.gson:gson:${rootProject.gson_version}"
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release = 17
    }

    compileKotlin {
        kotlinOptions.jvmTarget = 17
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
        toolchain.languageVersion = JavaLanguageVersion.of(17)
    }

    shadowJar {
        from("LICENSE") {
            rename { "${it}_${project.base.archivesName.get()}" }
        }
        relocate "okio", "tgbridge.shaded.okio"
        relocate "okhttp3", "tgbridge.shaded.okhttp3"
        relocate "retrofit2", "tgbridge.shaded.retrofit2"
        relocate "org.snakeyaml", "tgbridge.shaded.snakeyaml"
        relocate "com.charleskorn.kaml", "tgbridge.shaded.kaml"
        relocate "io.github.xn32", "tgbridge.shaded.xn32"
        relocate "net.kyori", "tgbridge.shaded.kyori"
    }
}
